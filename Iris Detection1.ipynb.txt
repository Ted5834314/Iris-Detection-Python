{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"gather.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMnAJr4/0Hw+EFENTkGvEcl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LsEUFLrUjysW","executionInfo":{"status":"ok","timestamp":1635746876068,"user_tz":240,"elapsed":33813,"user":{"displayName":"Xuchen Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01119482329174396333"}},"outputId":"78a2f95f-d4af-4466-8280-f0824b752071"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"EP3zFdjFj3ct"},"source":["import os \n","import cv2 \n","import matplotlib.pyplot as plt\n","import math\n","import numpy as np\n","import sklearn\n","from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n","from sklearn.neighbors import NearestCentroid as NC\n","from scipy import signal\n","import scipy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sLshSXI7kAD1"},"source":["",""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HH3_lN2nGmW3"},"source":["\n","\n","# The localizer won't generate a localized graph as in the paper(although when tuning it I did store the localized images),\n","# since it is really not necessary to just set the outer pixels of the\n","# original image to black. We only need to record radius and center of boundaries to do machine learning.\n","# The localizer generates a vector ((r1,c1,r2,c2,xl,yb),img) where r1 c1 are the radius and center of the inner boundary circle\n","# and r2 c2 are that of outer boundary circle. img is the original image,\n","# (xl,yb) is the origin of these coordinates, meaning that the actually coordinate\n","# should be (x+xl,y+yb) in the original image.\n","# I did not take pixels from the localized image since the outer circle may go beyond the boundary, so we need the full\n","# image to get pixels.\n","def dist(a,b):\n","  return (a[0]-b[0])*(a[0]-b[0])+(a[1]-b[1])*(a[1]-b[1])\n","  \n","def localizer(s):\n","  res=[]\n","  img = cv2.imread(s)\n","  img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n","  img_blur = cv2.GaussianBlur(img, (5,5), 0) # need blur to remove noise for better detection, 5 is just a standard kernel size\n","  # instead of following the projection technique described by the paper, I decided to first\n","  # find the pupil and set the center to be the center of the pupil\n","  # This is because that the technique in the paper would fail for some\n","  # images in the training set\n","  edges = cv2.Canny(image=img_blur, threshold1=150, threshold2=150)\n","  circles = cv2.HoughCircles(edges, cv2.HOUGH_GRADIENT, 1, 1000,\n","                               param1=100, param2=10,\n","                               minRadius=25, maxRadius=80) \n","  if circles is None:\n","    return None\n","  center=(round(circles[0][0][1]),round(circles[0][0][0]))\n","  # parameter explanation:\n","  # threshold in canny need to be high to remove noise. Pupil boundary has very high gradient so can always be detected\n","  # set the mindistance between circles to be 1000 so that there will be only one circle\n","  # param1 and param2 are not very important, just set to 100,10 or 100,30 so that a cycle can be detected, is param2 is too large\n","  # circle detection may fail\n","  # set a smaller range for radius so that pupil can be detected\n","  # the center is output as (y,x) so reverting is needed\n","  \n","\n","  # use the 240x240 region around the center as our ROI in localization stage, 120x120 region in the paper would be too small\n","  # (xl,yb) is our new origin\n","  r=120\n","  xl=max(0,center[0]-r)\n","  xr=min(len(img),center[0]+r)\n","  yb=max(0,center[1]-r)\n","  yt=min(len(img[0]),center[1]+r)\n","  loc=np.copy(img[xl:xr,yb:yt])\n","\n","  # repeat the same pupil finding process to more accurately locate the pupil\n","  # find the center and radius of pupil\n","  img_blur = cv2.GaussianBlur(loc, (5,5), 0)\n","  edges = cv2.Canny(image=img_blur, threshold1=150, threshold2=150)\n","  circles = cv2.HoughCircles(edges, cv2.HOUGH_GRADIENT, 1, 1000,\n","                               param1=100, param2=10,\n","                               minRadius=25, maxRadius=80)\n","  cent = (circles[0][0][0], circles[0][0][1])\n","  radius = circles[0][0][2]\n","  if circles is None:\n","    return None\n","  \n","\n","  # two different set of edges are created\n","  # one to detect obscure outer boundaries(10,30), the other to detect clear boundaries(20,30)\n","  edges2 = cv2.Canny(image=img_blur, threshold1=10, threshold2=30)\n","  edges3 = cv2.Canny(image=img_blur, threshold1=20, threshold2=30)\n","  \n","\n","  # set the area around and within pupil boundary to black, so that we can detect\n","  # the outer boundary without being influenced by the pupil\n","  for i in range(len(edges2)):\n","    for j in range(len(edges2[0])):\n","      if (i-cent[1])*(i-cent[1])+(j-cent[0])*(j-cent[0])<=radius*radius+1000:\n","        edges2[i][j]=0\n","        edges3[i][j]=0\n","\n","\n","  # find two circles from two edges, the radius range is set to be larger to detect outer boundary\n","  # maxRadius of the first one is smaller just because some how it can detect boundary better for\n","  # some individual cases\n","  # other parameters just follw the same idea described in pupil detection phase\n","  circles2 = cv2.HoughCircles(edges2, cv2.HOUGH_GRADIENT, 1, 1000,\n","                               param1=100, param2=30,\n","                               minRadius=80, maxRadius=170)\n","  circles3 = cv2.HoughCircles(edges3, cv2.HOUGH_GRADIENT, 1, 1000,\n","                               param1=100, param2=30,\n","                               minRadius=80, maxRadius=180)\n","  realr=0\n","  realcent=0\n","\n","  # pick the one whose center is closer to pupil center as our real outer boundary\n","  if circles3 is None and circles2 is None:\n","    return None\n","  elif circles3 is not None and circles2 is not None:\n","    cent2=(circles2[0][0][0], circles2[0][0][1])\n","    r2=circles2[0][0][2]\n","    cent3=(circles3[0][0][0], circles3[0][0][1])\n","    r3=circles3[0][0][2]\n","    if dist(cent,cent2)>dist(cent,cent3):\n","      realr=r3\n","      realcent=cent3\n","    else:\n","      realr=r2\n","      realcent=cent2\n","  elif circles3 is not None:\n","    realr=circles3[0][0][2]\n","    cent3=(circles3[0][0][0], circles3[0][0][1])\n","    realcent=cent3\n","  else:\n","    realr=circles2[0][0][2]\n","    cent2=(circles2[0][0][0], circles2[0][0][1])\n","    realcent=cent2\n","  \n","  # actually the None cases would not happen in our localization for all images, but they are written just in case\n","\n","  return [[radius,cent,realr,realcent,xl,yb,],img]\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r0S6ACbGF-GF"},"source":["def normalizer(locinfo,img,shift=0):\n","  # locinfo is the first element of the return value of localizer\n","  # img is the second element, which is the original image\n","  # shift is the angle to shift for image augmentation described in the paper\n","  if not locinfo:\n","    return None\n","  #normalized image size\n","  xlim=64\n","  ylim=512\n","  r1=locinfo[0]\n","  c1=locinfo[1]\n","  r2=locinfo[2]\n","  c2=locinfo[3]\n","  xl=locinfo[4]\n","  yb=locinfo[5]\n","  normalized=np.zeros(xlim*ylim, dtype=np.uint8).reshape(xlim, ylim)\n","  rec=0\n","\n","  # for each i,j of normalized image, map to the corresponding position in the original image\n","  for i in range(xlim):\n","    for j in range(ylim):\n","      # prop is the relative distance from the line segment p1->p2, that is, Y/M in the paper.\n","      prop=i/(xlim-1)\n","      # because the coordinate system of python image is different from normal cartaesian coordinate,\n","      # following the same formula on the paper there would be a pi/2 rotation. Specifically: (image)(dx,dy)=(-dy,dx)(cartaesian)\n","      theta=2*math.pi*j/(ylim-1)+math.pi/2+shift   \n","      xd=math.cos(theta)\n","      yd=math.sin(theta)\n","      # p1 and p2 are the corresponding points with angle theta on inner and outer boundaries\n","      p1=(xd*r1+c1[1],yd*r1+c1[0])\n","      p2=(xd*r2+c2[1],yd*r2+c2[0])\n","      # get p on the line segment corresponding to prop\n","      p=(int(round(p1[0]+prop*(p2[0]-p1[0]))),int(round(p1[1]+prop*(p2[1]-p1[1]))))\n","      # p is the coordinate relative to the origin of localized image (xl,yb), so need to adjust it\n","      xfin=xl+p[0]\n","      yfin=yb+p[1]\n","      # in case exceeds the boundary of the original image\n","      # this rarely happens\n","      if xfin<0:\n","        xfin=0\n","      if yfin<0:\n","        yfin=0\n","      if xfin>=280:\n","        xfin=279\n","      if yfin>=320:\n","        yfin=319\n","      normalized[i][j]=img[xfin][yfin]\n","\n","  return normalized\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bD23w0D9ScAT"},"source":["def enhancer(normalized):\n","  xlim=64\n","  ylim=512\n","  blursize=16\n","  blurred=np.zeros(xlim*ylim//blursize//blursize, dtype=np.uint8).reshape(xlim//blursize, ylim//blursize)\n","  # blur by taking mean in 16x16 blocks\n","  for i in range(len(blurred)):\n","    for j in range(len(blurred[0])):\n","      sum=0.0\n","      for k in range(blursize*blursize):\n","        t=blursize*i+k//blursize\n","        s=blursize*j+k%blursize\n","        sum+=normalized[t][s]\n","      sum/=(blursize*blursize)\n","      blurred[i][j]=np.uint8(sum)\n","  # resize by bicubic interpolation\n","  background= cv2.resize(blurred, (ylim, xlim), interpolation=cv2.INTER_CUBIC)\n","  # since negative numbers of type uint8 doesn't exist, first convert to int\n","  # and shift above by the min intensity\n","  realenhanced=normalized.astype(int)-background.astype(int)\n","  realenhanced=realenhanced+np.min(realenhanced)\n","  realenhanced[realenhanced>255]=255\n","  realenhanced=realenhanced.astype(np.uint8)\n","  # do histogram equalization for each 32x32 blocks\n","  for i in range(len(realenhanced)//32):\n","    for j in range(len(realenhanced[0])//32):\n","      realenhanced[i*32:(i+1)*32,j*32:(j+1)*32]=cv2.equalizeHist(realenhanced[i*32:(i+1)*32,j*32:(j+1)*32])\n","  return realenhanced\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fvr-AfcGmQhk"},"source":["# piepline for generating enhanced images\n","# pipeline generates images for training set\n","# pipeline generates images for test set\n","# 这个放在main里\n","\n","def pipeline(imgname):\n","  locinfo=localizer(imgname)\n","  # 7 angles to be shifted\n","  angles=[np.pi/20,np.pi/30,np.pi/60,0,-np.pi/20,-np.pi/30,-np.pi/60]\n","  featurevec=[]\n","  for shift in angles:\n","    normalized=normalizer(locinfo[0],locinfo[1],shift)\n","    enhanced=enhancer(normalized)\n","    featurevec.append(enhanced)\n","  return featurevec\n","def pipelinetest(imgname):\n","  locinfo=localizer(imgname)\n","  featurevec=[]\n","  normalized=normalizer(locinfo[0],locinfo[1])\n","  enhanced=enhancer(normalized)\n","  featurevec.append(enhanced)\n","  return featurevec"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L1iXH44dsIDi"},"source":["train=[]\n","test=[]\n","basename='/content/drive/MyDrive/Proj/'\n","# get training and testing images\n","for i in range(1,109):\n","  for j in range(1,4):\n","    nz=3-len(str(i))\n","    newname=basename\n","    newname+=('0'*nz+str(i))\n","    newname+='/1/'\n","    newname+=('0'*nz+str(i)+\"_\"+\"1\"+\"_\"+str(j)+\".bmp\")\n","    res=pipeline(newname)\n","    train+=res\n","  for k in range(1,5):\n","    nz=3-len(str(i))\n","    newname=basename\n","    newname+=('0'*nz+str(i))\n","    newname+='/2/'\n","    newname+=('0'*nz+str(i)+\"_\"+\"2\"+\"_\"+str(k)+\".bmp\")\n","    res=pipelinetest(newname)\n","    test+=res\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r3CvAvnS6qbs"},"source":["\n","","\n","# This implementation follows the formula given in the paper\n","# and follows similar logic in wikipedia's python implementation\n","# of gabor filter. See https://en.wikipedia.org/wiki/Gabor_filter\n","# That is, the origin of a gabor filter matrix is set to be its center\n","sigma_x_1, sigma_y_1  = 3,  1.5\n","sigma_x_2, sigma_y_2  = 4.5,  1.5\n","\n","result_vector = []\n","\n","\n","def ROI(image):\n","    return image[0:48,:]\n","\n","\n","def Gaborfilter(x, y, sigma_x, sigma_y,f):\n","    return (1/(2*(math.pi)*sigma_x*sigma_y))*math.exp(-0.5*(x**2/sigma_x**2 + y**2/sigma_y**2)) * M(x,y,f)\n","    \n","    \n","    \n","def M(x,y,f):\n","    # f is the frequency of sinusoidal function\n","    return math.cos(2*math.pi*f*math.sqrt(x**2 + y**2))\n","\n","\n","\n","def getKernal(sigma_x, sigma_y,f):\n","    kernal = np.zeros((9,9))\n","    for i in range(0,9):\n","        for j in range(0,9):\n","            kernal[i,j] = Gaborfilter(i-4, j-4, sigma_x, sigma_y,f)\n","    return kernal\n","\n","            \n","            \n","def getConvolution(img, sigma_x, sigma_y,f):\n","    roi = ROI(img)\n","    kernal = getKernal(sigma_x, sigma_y,f)\n","    return scipy.signal.convolve2d(roi, kernal, mode='same', boundary='wrap')\n","\n","\n","def get_feature_vector(image, sigma_x, sigma_y,f):\n","    img = getConvolution(image, sigma_x, sigma_y,f)\n","    len_row = len(img)\n","    len_col = len(img[0])\n","    rows = len_row//8\n","    cols = len_col//8\n","    feature_vector=[]\n","    for r in range(0,rows):\n","        for c in range(0,cols):\n","            mean = np.mean(np.abs(img[8*r:8*(r+1), 8*c:8*(c+1)]))\n","            sd = np.mean(np.abs((np.abs(img[8*r:8*(r+1), 8*c:8*(c+1)]) - mean)))\n","            feature_vector.append(mean)\n","            feature_vector.append(sd)\n","    return feature_vector"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-jFtKWSGQK5c"},"source":["# extract featue vectors with two\n","# set of sigmax and sigmay as described in the\n","# pater and glue them to a length 1536 vector\n","def feature_extractor(train,test):\n","  trainf=[]\n","  testf=[]\n","  for i in range(len(train)):\n","    # f is set to 1/sigmax\n","    fvec1=get_feature_vector(train[i], 4.5, 1.5,1/4.5)\n","    fvec2=get_feature_vector(train[i], 3, 1.5,1/3)\n","    trainf.append(fvec1+fvec2)\n","  for j in range(len(test)):\n","    fvec1=get_feature_vector(test[j], 4.5, 1.5,1/4.5)\n","    fvec2=get_feature_vector(test[j], 3, 1.5,1/3)\n","    testf.append(fvec1+fvec2)\n","  return [np.array(trainf),np.array(testf)]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h4rL85-7IAR4"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":93},"id":"fHY1dzGH8D_m","executionInfo":{"status":"ok","timestamp":1635749427207,"user_tz":240,"elapsed":381,"user":{"displayName":"Xuchen Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01119482329174396333"}},"outputId":"885fd905-3c38-4f8e-977d-58e45c43ee05"},"source":["\n","plt.imshow(train[0], cmap=\"gray\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"8-dKQ83CKc04","executionInfo":{"status":"ok","timestamp":1635751502764,"user_tz":240,"elapsed":122,"user":{"displayName":"Xuchen Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01119482329174396333"}}},"source":["#modtrain outputs a vector [LDA,mod1,mod2,mod3]\n","#LDA is the feature reduction strategy from training set\n","#NC is the nearest center classifier from training set NC=[NC1,NC2,NC3] corresponding to different distance metrics\n","","def cos(x,y):\n","  return 1-np.dot(x,y)/ np.linalg.norm(x)/np.linalg.norm(y)\n","def mh(x,y):\n","  return np.linalg.norm(x-y,ord=1)\n","def eu(x,y):\n","  return np.linalg.norm(x-y,ord=2)\n","def mod(x):\n","  return x//7\n","\n","\n","# In the paper, the author took the \"min of the seven scores\". which may be\n","# well defined where each class only occur once in the training set\n","# However when there are more than one observation for each class in the training set,\n","# this distance measure becomes dubious. For example we apply the nearest center classifier\n","# and the center of the 3 observations would be their mean. But this mean,\n","# as a feature vector, has lost all information as an image, so we are not\n","# able to acquire the shifted features of this \"mean vector\"\n","# The only reasonable thing to do here, is to set \n","def modtrain(X,y,n):\n","  LDA_transform = LDA(n_components=n)\n","  totalcat=108\n","  gsize=3*7\n","  LDA_transform.fit(X, y)\n","  features_new = LDA_transform.transform(X)\n","  model1 = NC(metric='euclidean')\n","  model2 = NC(metric='manhattan')\n","  model3 = NC(metric=cos)\n","  model1.fit(features_new,y)\n","  model2.fit(features_new,y)\n","  model3.fit(features_new,y)\n","  return [LDA_transform,model1,model2,model3]\n","\n"],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"id":"qzd3kbbLTGLV","executionInfo":{"status":"ok","timestamp":1635751512027,"user_tz":240,"elapsed":117,"user":{"displayName":"Xuchen Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01119482329174396333"}}},"source":["#calculate CRR for 3 distance measures\n","def CRRcalc(Xtest,ytest,lda,model1,model2,model3):\n","  totalcat=108\n","  gsize=4*7# 这俩目前没用\n","  features_new=lda.transform(Xtest)\n","  pred1=model1.predict(features_new)\n","  pred2=model2.predict(features_new)\n","  pred3=model3.predict(features_new)\n","  CRR1= np.sum(ytest==pred1)/np.size(ytest)\n","  CRR2= np.sum(ytest==pred2)/np.size(ytest)\n","  CRR3= np.sum(ytest==pred3)/np.size(ytest)\n","  return [CRR1,CRR2,CRR3]"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dmKsdnQmXnmS","executionInfo":{"status":"ok","timestamp":1635751618132,"user_tz":240,"elapsed":98046,"user":{"displayName":"Xuchen Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01119482329174396333"}},"outputId":"b1da06be-8f99-4676-8e8b-ce695cc70c45"},"source":["\n","#extract feature, compute labels and build model\n","fvec=feature_extractor(train,test)\n","X=fvec[0]\n","Xtest=fvec[1]\n","y=np.array([i for i in range(1,109) for j in range(21) ])\n","ytest=np.array([i for i in range(1,109) for j in range(4) ])\n","models=modtrain(X,y,100)\n","CRRcalc(Xtest,ytest,models[0],models[1],models[2],models[3])"],"execution_count":70,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/_nearest_centroid.py:145: UserWarning: Averaging for metrics other than euclidean and manhattan not supported. The average is set to be the mean.\n","  warnings.warn(\"Averaging for metrics other than \"\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.8449074074074074, 0.8125, 0.8541666666666666]"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"iLT02dySbLKy","executionInfo":{"status":"ok","timestamp":1635751653419,"user_tz":240,"elapsed":95,"user":{"displayName":"Xuchen Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01119482329174396333"}}},"source":["","\n","#calculate FMNR by fixing FMR, choosing corresponding threshold\n","#by percentile\n","def calcmindist(x,cat,dist,gsize,totalcat,X):\n","  cent=np.array([0.0]*1536)\n","  for i in range(gsize):\n","    pos=cat*gsize+i\n","    cent+=X[pos]\n","  cent=cent/gsize\n","  return dist(x,cent)\n","def FMNRcalc(Xtest,ytest,X,dist):\n","  np.random.seed(32)\n","  totalcat=108\n","  gsize=4\n","  thresh=0.5\n","  ytest2=sklearn.utils.shuffle(ytest)\n","  # to calculate FMR, we need non matching lables so random shuffle ytest\n","  count=0\n","  total=0\n","  distlst=[]\n","  for i in range(totalcat*gsize):\n","    if ytest2[i]!=ytest[i]:\n","      total+=1\n","      distlst.append(calcmindist(Xtest[i],ytest2[i]-1,dist,21,108,X))\n","  # the ith percentile of the distance array is just the threshold i% for FMR rate\n","  # specifically, distance<threshold would be FMR case\n","  thresh_10p=np.percentile(distlst, 10)\n","  thresh_15p=np.percentile(distlst, 15)\n","  thresh_20p=np.percentile(distlst, 20)\n","  threshlst=[thresh_10p,thresh_15p,thresh_20p]\n","  FMNRrate=[]\n","  # calculate FMNR with the original labels since we want false non-matching cases\n","  for thresh in threshlst:\n","    falsepred=0\n","    for i in range(totalcat*gsize):\n","      if calcmindist(Xtest[i],ytest[i]-1,cos,21,108,X)>thresh:\n","        falsepred+=1\n","    FMNRrate.append(falsepred/totalcat/gsize)\n","  return FMNRrate"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ffKQ4qwzVsxV","executionInfo":{"status":"ok","timestamp":1635751667418,"user_tz":240,"elapsed":424,"user":{"displayName":"Xuchen Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01119482329174396333"}},"outputId":"19bae4f5-5a72-4473-b1f2-e09213c9955f"},"source":["FMNRcalc(Xtest,ytest,X,cos)"],"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.3287037037037037, 0.25, 0.23842592592592593]"]},"metadata":{},"execution_count":73}]}]}